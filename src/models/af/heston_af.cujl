
function simulate!(X,mcProcess::HestonProcess,spotData::ZeroRate,mcBaseData::MonteCarloConfiguration{type1,type2,type3,AFMode,type5},T::numb) where {numb <: Number, type1 <: Number, type2<: Number, type3 <: StandardMC, type5 <: Random.AbstractRNG}
	@show "arrafire"
	r=spotData.r;
	S0=mcProcess.underlying.S0;
	d=mcProcess.underlying.d;
	Nsim=mcBaseData.Nsim;
	Nstep=mcBaseData.Nstep;
	σ=mcProcess.σ;
	σ_zero=mcProcess.σ_zero;
	λ1=mcProcess.λ;
	κ=mcProcess.κ;
	ρ=mcProcess.ρ;
	θ=mcProcess.θ;
	@assert T>0

	####Simulation
	## Simulate
	κ_s=κ+λ1;
	θ_s=κ*θ/(κ+λ1);

	dt=T/Nstep
	ρ_f=Float32(ρ);
	κ_s_f=Float32(κ_s);
	θ_s_f=Float32(θ_s);
	r_d_f=Float32(r-d)
	dt_f=Float32(dt)
	σ_f=Float32(σ)
	isDualZero=zero(S0*T*r*σ_zero*κ*θ*λ1*σ*ρ);
	v_m= zeros(AFArray{typeof(isDualZero)}, Nsim).+σ_zero

	for j in 1:Nstep
		e1=randn(AFArray{Float32},Nsim);
		e2=randn(AFArray{Float32},Nsim);
		e2=e1.*ρ_f.+e2.*sqrt(1-ρ_f*ρ_f);
		@inbounds X[:,j+1].=X[:,j]+((r_d_f).-0.5.*max.(v_m,0)).*dt_f+sqrt.(max.(v_m,0)).*sqrt(dt_f).*e1;
		v_m+=κ_s_f.*(θ_s_f.-max.(v_m,0)).*dt_f+σ_f.*sqrt.(max.(v_m,0)).*sqrt(dt_f).*e2;
	end
	## Conclude
	X.=S0.*exp.(X);
	return;
end


function simulate!(X,mcProcess::HestonProcess,spotData::ZeroRate,mcBaseData::MonteCarloConfiguration{type1,type2,type3,AFMode,type5},T::numb) where {numb <: Number, type1 <: Number, type2<: Number, type3 <: AntitheticMC, type5 <: Random.AbstractRNG}
	@show "arrafire"
	r=spotData.r;
	S0=mcProcess.underlying.S0;
	d=mcProcess.underlying.d;
	Nsim=mcBaseData.Nsim;
	Nstep=mcBaseData.Nstep;
	σ=mcProcess.σ;
	σ_zero=mcProcess.σ_zero;
	λ1=mcProcess.λ;
	κ=mcProcess.κ;
	ρ=mcProcess.ρ;
	θ=mcProcess.θ;
	@assert T>0

	####Simulation
	## Simulate
	κ_s=κ+λ1;
	θ_s=κ*θ/(κ+λ1);

	dt=T/Nstep
	ρ_f=Float32(ρ);
	κ_s_f=Float32(κ_s);
	θ_s_f=Float32(θ_s);
	r_d_f=Float32(r-d)
	dt_f=Float32(dt)
	σ_f=Float32(σ)
	isDualZero=zero(S0*T*r*σ_zero*κ*θ*λ1*σ*ρ);
	v_m= zeros(AFArray{typeof(isDualZero)}, Nsim).+σ_zero
	Nsim_2=Int(floor(Nsim/2))

	for j in 1:Nstep
		e1=randn(AFArray{Float32},Nsim_2);
		e2=randn(AFArray{Float32},Nsim_2);
		e1=[e1;-e1];
		e2=[e2;-e2];
		e2=e1.*ρ_f.+e2.*sqrt(1-ρ_f*ρ_f);
		@inbounds X[:,j+1]=X[:,j]+((r_d_f).-0.5.*max.(v_m,0)).*dt_f+sqrt.(max.(v_m,0)).*sqrt(dt_f).*e1;
		v_m+=κ_s_f.*(θ_s_f.-max.(v_m,0)).*dt_f+σ_f.*sqrt.(max.(v_m,0)).*sqrt(dt_f).*e2;
	end
	## Conclude
	X=Array(S0.*exp.(X));
	return;
end

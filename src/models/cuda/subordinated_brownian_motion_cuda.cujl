
function simulate(mcProcess::SubordinatedBrownianMotion,mcBaseData::MonteCarloConfiguration{type1,type2,type3,CudaMode,type5},T::numb,dt_s::Array{num1,2}) where {numb <: Number , num1 <: Number, type1 <: Number, type2<: Number, type3 <: StandardMC, type5 <: Random.AbstractRNG}
	Nsim=mcBaseData.Nsim;
	Nstep=mcBaseData.Nstep;
	if(size(dt_s)!=(Nsim,Nstep))
		error("Inconsistent Time Matrix")
	end
	drift=mcProcess.drift;
	sigma=mcProcess.sigma;
	@assert T>0.0
	dt_s=cu(dt_s)
	isDualZero=drift*sigma*zero(eltype(dt_s))*zero(Float32);
	X_cu=CuMatrix{typeof(isDualZero)}(undef,Nsim,Nstep+1);
	X_cu[:,1].=isDualZero;
	Z=Array{Float64}(undef,Nsim)
	for i=1:Nstep
		# SUBORDINATED BROWNIAN MOTION (dt_s=time change)
		X_cu[:,i+1]=X_cu[:,i].+drift.*dt_s[:,i].+sigma.*sqrt.(dt_s[:,i]).*CuArrays.CURAND.curandn(Float32,Nsim);
	end
	return X_cu;
end



function simulate(mcProcess::SubordinatedBrownianMotion,mcBaseData::MonteCarloConfiguration{type1,type2,type3,CudaMode,type5},T::numb,dt_s::Array{num1,2}) where {numb <: Number, num1 <: Number, type1 <: Number, type2<: Number, type3 <: AntitheticMC, type5 <: Random.AbstractRNG}
	Nsim=mcBaseData.Nsim;
	Nstep=mcBaseData.Nstep;
	if(size(dt_s)!=(Nsim,Nstep))
		error("Inconsistent Time Matrix")
	end
	drift=mcProcess.drift;
	sigma=mcProcess.sigma;
	@assert T>0.0
	dt_s=cu(dt_s)
	isDualZero=drift*sigma*zero(eltype(dt_s))*zero(Float32);
	X_cu=CuMatrix{typeof(isDualZero)}(undef,Nsim,Nstep+1);
	X_cu[:,1].=isDualZero;
	NsimAnti=div(Nsim,2)
	for i=1:Nstep
		Z=CuArrays.CURAND.curandn(Float32,NsimAnti);
		Z=[Z;-Z];
		# SUBORDINATED BROWNIAN MOTION (dt_s=time change)
		X_cu[:,i+1]=X_cu[:,i].+drift.*dt_s[:,i].+sigma.*sqrt.(dt_s[:,i]).*Z;
	end
	return X_cu;
end

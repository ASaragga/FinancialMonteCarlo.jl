
function simulate!(X_cu,mcProcess::BrownianMotionVec,mcBaseData::MonteCarloConfiguration{type1,type2,type3,CudaMode_2,type5},T::numb) where {numb <: Number, type1 <: Number, type2<: Number, type3 <: StandardMC, type5 <: Random.AbstractRNG}
	Nsim=mcBaseData.Nsim;
	Nstep=mcBaseData.Nstep;

	σ=mcProcess.σ;
	μ=mcProcess.μ;
	@assert T>0
	dt=T/Nstep
	mean_bm=μ*dt
	stddev_bm=σ*sqrt(dt)
	isDualZero=mean_bm*stddev_bm*0;
	Z=CuArrays.zeros(Nsim);
	for i=1:Nstep
		X_pr=view(X_cu,:,i);
		tmp_=μ((i-1)*dt,dt);
		randn!(Z);
		@inbounds X_cu[:,i+1]=X_pr+(tmp_.+stddev_bm*Z);
	end
	return;
end


function simulate!(X_cu,mcProcess::BrownianMotionVec,mcBaseData::MonteCarloConfiguration{type1,type2,type3,CudaMode_2,type5},T::numb) where {numb <: Number, type1 <: Number, type2<: Number, type3 <: AntitheticMC, type5 <: Random.AbstractRNG}
	Nsim=mcBaseData.Nsim;
	Nstep=mcBaseData.Nstep;

	σ=mcProcess.σ;
	μ=mcProcess.μ;
	@assert T>0
	dt=T/Nstep
	mean_bm=μ*dt
	stddev_bm=σ*sqrt(dt)
	isDualZero=mean_bm*stddev_bm*zero(Float32);
	Nsim_2=Int(floor(Nsim/2))

	for i=1:Nstep
		tmp_=μ((i-1)*dt,dt);
		Z=CuArrays.CURAND.randn(Float32,Nsim_2);
		Z=[Z;-Z];
		X_cu[:,i+1]=X_cu[:,i]+(tmp_.+stddev_bm.*Z);
	end
	return;
end


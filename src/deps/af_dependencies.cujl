struct AFMode <: ParallelMode end

using .ArrayFire
include("../models/af/brownian_motion_af.cujl")
include("../models/af/heston_af.cujl")
#include("models/af/brownian_motion_cuda_2.cujl")
#include("models/af/heston_cuda_2.cujl")
#include("models/af/subordinated_brownian_motion_cuda.cujl")


function set_seed(mcConfig::MonteCarloConfiguration{type1,type2,type3,type4,type5})  where {type1 <: Integer, type2<: Integer, type3 <: AbstractMonteCarloMethod, type4 <: AFMode, type5 <: Random.AbstractRNG}

	ArrayFire.set_seed(UInt64(mcConfig.seed));
	
	return;
	
end

get_matrix_type(mcConfig::MonteCarloConfiguration{<: Integer, <: Integer, <: AbstractMonteCarloMethod, <: AbstractCudaMode, <: Random.AbstractRNG})=CuMatrix;
get_array_type(mcConfig::MonteCarloConfiguration{<: Integer, <: Integer, <: AbstractMonteCarloMethod, <: AbstractCudaMode, <: Random.AbstractRNG})=AFArray{typeof(isDualZero)};


function simulate(mcProcess::AbstractMonteCarloProcess,zeroCurve::AbstractZeroRateCurve,mcBaseData::MonteCarloConfiguration{type1,type2,type3,type4,type5},T::Number) where {type1 <: Integer, type2<: Integer, type3 <: AbstractMonteCarloMethod, type4 <: AFMode, type5 <: Random.AbstractRNG}
	price_type=predict_output_type_zero(mcProcess,zeroCurve,mcBaseData,T);
	S=zeros(AFArray{typeof(price_type)}, mcBaseData.Nsim, mcBaseData.Nstep+1)
	simulate!(S,mcProcess,zeroCurve,mcBaseData,T)
	return S;
end

function simulate(mcProcess::VectorialMonteCarloProcess,zeroCurve::AbstractZeroRateCurve,mcBaseData::MonteCarloConfiguration{type1,type2,type3,type4,type5},T::Number) where {type1 <: Integer, type2<: Integer, type3 <: AbstractMonteCarloMethod, type4 <: AFMode, type5 <: Random.AbstractRNG}
	price_type=predict_output_type_zero(mcProcess,zeroCurve,mcBaseData,T);
	S=Array{AFArray{price_type,2}}(undef,length(mcProcess.models));
	for i=1:length(mcProcess.models)
		S[i]=zeros(AFArray{typeof(price_type)}, mcBaseData.Nsim, mcBaseData.Nstep+1);
	end
	simulate!(S,mcProcess,zeroCurve,mcBaseData,T)
	return S;
end

function simulate(mcProcess::AbstractMonteCarloEngine,mcBaseData::MonteCarloConfiguration{type1,type2,type3,type4,type5},T::Number) where {type1 <: Integer, type2<: Integer, type3 <: AbstractMonteCarloMethod, type4 <: AFMode, type5 <: Random.AbstractRNG}
	price_type=predict_output_type_zero(mcProcess,mcBaseData,T);
	S=zeros(AFArray{typeof(price_type)}, mcBaseData.Nsim, mcBaseData.Nstep+1)
	simulate!(S,mcProcess,mcBaseData,T)
	return S;
end
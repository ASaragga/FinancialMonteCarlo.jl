# An example .gitlab-ci.yml file to test (and optionally report the coverage
# results of) your [Julia][1] packages. Please refer to the [documentation][2]
# for more information about package development in Julia.
#
# Here, it is assumed that your Julia package is named `MonteCarlo`. Change it to
# whatever name you have given to your package.
#
# [1]: http://julialang.org/
# [2]: http://julia.readthedocs.org/
stages:
  - build
  - test
  - coverage
before_script:
    # Install build dependencies
    - apt-get update && apt-get -y install cmake
    - apt-get update && apt-get -y install gcc
    - apt-get update && apt-get -y install g++
    - apt-get update && apt-get -y install bzip2

# Below is the template to run your tests in Julia
.test_template: &test_definition
  # Uncomment below if you would like to run the tests on specific references
  # only, such as the branches `master`, `development`, etc.
  # only:
  #   - master
  #   - development
  script:
    # Let's run the tests. Substitute `coverage = false` below, if you do not
    # want coverage results.
    - /usr/local/julia/bin/julia -e 'using InteractiveUtils; versioninfo(); using Pkg; Pkg.clone(pwd()); using MonteCarlo'
    - /usr/local/julia/bin/julia -e 'using Pkg; Pkg.test("MonteCarlo",coverage = true)'

.test_template: &build_definition
  # Uncomment below if you would like to run the tests on specific references
  # only, such as the branches `master`, `development`, etc.
  # only:
  #   - master
  #   - development
  script:
    # Let's run the tests. Substitute `coverage = false` below, if you do not
    # want coverage results.
    - /usr/local/julia/bin/julia -e 'using InteractiveUtils; versioninfo(); using Pkg; Pkg.clone(pwd()); using MonteCarlo'
    
.test_template: &cov_definition
  # Uncomment below if you would like to run the tests on specific references
  # only, such as the branches `master`, `development`, etc.
  # only:
  #   - master
  #   - development
  script:
    - /usr/local/julia/bin/julia -e 'using InteractiveUtils; versioninfo(); using Pkg; Pkg.clone(pwd()); using MonteCarlo'
    - /usr/local/julia/bin/julia -e 'using Pkg; Pkg.test("MonteCarlo",coverage = true)'
    - /usr/local/julia/bin/julia -e 'using Pkg; Pkg.add("Coverage"); cd(Pkg.dir("MonteCarlo"));
      using Coverage; cl, tl = get_summary(process_folder());
      println("(", cl/tl*100, "%) covered")'

# Name a test and select an appropriate image.
build:0.7:
  stage: build
  image: julia:0.7
  <<: *build_definition
test:0.7:
  stage: test
  image: julia:0.7
  <<: *test_definition
coverage:0.7:
  stage: coverage
  image: julia:0.7
  <<: *cov_definition
# Windows
#test:0.6.3-Windows:
#  image: julia:windowsservercore-1709
#  <<: *test_definition

## Maybe you would like to test your package against the development branch:
build:1.0:
  stage: build
  image: julia:1.0
  allow_failure: true
  <<: *build_definition
test:1.0:
  image: julia:1.0
  stage: test
  allow_failure: true
  # ... allowing for failures, since we are testing against the development
  # branch:
  <<: *test_definition
  
#test:dev-Windows:
#  image: julia:0.6.3-windowsservercore-1709
#  # ... allowing for failures, since we are testing against the development
#  # branch:
#  allow_failure: true
#  <<: *test_definition

# REMARK: Do not forget to enable the coverage feature for your project, if you
# are using code coverage reporting above. This can be done by
#
# - Navigating to the `CI/CD Pipelines` settings of your project,
# - Copying and pasting the default `Simplecov` regex example provided, i.e.,
#   `\(\d+.\d+\%\) covered` in the `test coverage parsing` textfield.
#
# WARNING: This template is using the `julialang/julia` images from [Docker
# Hub][3]. One can use custom Julia images and/or the official ones found
# in the same place. However, care must be taken to correctly locate the binary
# file (`/opt/julia/bin/julia` above), which is usually given on the image's
# description page.
#
# [3]: http://hub.docker.com/
#FinancialMonteCarlo.jl
variables:
  JULIA_DEPOT_PATH: "$CI_PROJECT_DIR/.julia/"
stages:
  - build
  - test
  - coverage
  - benchmark
  - deploy
before_script:
    # Install build dependencies
    - apt-get update && apt-get -y install cmake
    - apt-get update && apt-get -y install gcc
    - apt-get update && apt-get -y install g++
    - apt-get update && apt-get -y install bzip2

# Below is the template to run your tests in Julia

.test_template: &build_definition
  script:
    - /usr/local/julia/bin/julia --project=@. -e 'using InteractiveUtils; versioninfo(); import Pkg; Pkg.build(); using FinancialMonteCarlo'

.test_template: &test_definition
  script:
    - /usr/local/julia/bin/julia --project=@. -e 'using InteractiveUtils; versioninfo(); import Pkg; Pkg.build(); using FinancialMonteCarlo'
    - /usr/local/julia/bin/julia --project=@. -e 'import Pkg; Pkg.test(; coverage = true)'
  artifacts:
    when: on_success
    paths:
      - .julia/
      - src/*.cov
      - src/*/*.cov
      - src/*/*/*.cov
    expire_in: '1 hour'


.test_template: &cov_definition
  script:
    - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib/
    - /usr/local/julia/bin/julia --project=@. -e 'using Pkg; Pkg.add("Coverage"); import Pkg; Pkg.build(); using FinancialMonteCarlo;
      using Coverage; cl, tl = get_summary(process_folder());
      println("(", cl/tl*100, "%) covered")'
  artifacts:
    when: on_success
    paths:
      - .julia/
    expire_in: '1 hour'
      
      

.test_template: &bench_definition
  script:
    - julia --project=benchmark -e 'using Pkg; Pkg.instantiate(); Pkg.develop(PackageSpec(path=pwd()))'
    - /usr/local/julia/bin/julia --project=benchmark -e 'using Pkg; Pkg.instantiate(); include("benchmark/benchmarks.jl");'
    - /usr/local/julia/bin/julia --project=benchmark -e 'using Pkg; Pkg.instantiate(); include("benchmark/bench_black_mn.jl");'
    - /usr/local/julia/bin/julia -p4 -e 'using Pkg; Pkg.add("BenchmarkTools"); Pkg.instantiate(); include("benchmark/bench_black_mp.jl");'
    - export JULIA_NUM_THREADS=4 && /usr/local/julia/bin/julia --project=benchmark -e 'using Pkg; Pkg.instantiate(); include("benchmark/bench_black_mt.jl");'
    
################################################################
################ AFArrays
################################################################
.test_template: &install_af
  before_script:
    - apt-get update && apt-get -y install cmake
    - apt-get update && apt-get -y install gcc
    - apt-get update && apt-get -y install g++
    - apt-get update && apt-get -y install bzip2
    - apt-get update && apt-get -y install wget
    - apt-get update && apt-get -y install fontconfig
    - apt-get update
    - apt-get -y install libfreeimage-dev libatlas3-base libfftw3-dev cmake libglfw3-dev mesa-utils
    - wget -q http://arrayfire.s3.amazonaws.com/3.7.1/ArrayFire-v3.7.1_Linux_x86_64.sh
    - chmod +x ArrayFire-v3.7.1_Linux_x86_64.sh
    - ./ArrayFire-v3.7.1_Linux_x86_64.sh --exclude-subdir --prefix=/usr/local
    - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib/
    - ldconfig

.test_template: &build_definition_af
  script:
    - /usr/local/julia/bin/julia -e 'using InteractiveUtils; versioninfo(); using Pkg; Pkg.clone(pwd()); Pkg.add("ArrayFire"); using FinancialMonteCarlo,ArrayFire'
    
.test_template: &test_definition_af
  script:
    - /usr/local/julia/bin/julia -e 'using Pkg; Pkg.add("ArrayFire"); Pkg.clone(pwd());using FinancialMonteCarlo; cd(joinpath(dirname(pathof(FinancialMonteCarlo)), "..","test","af"));
      include("runtests.jl");'
      
.test_template: &bench_definition_af
  script:
    - /usr/local/julia/bin/julia -e 'using Pkg; Pkg.add("BenchmarkTools"); Pkg.add("ArrayFire");Pkg.clone(pwd());using FinancialMonteCarlo; cd(joinpath(dirname(pathof(FinancialMonteCarlo)), "..","benchmark","af"));
      include("bench_black_af.jl");'

# Name a test and select an appropriate image.
build:1.4:
  stage: build
  image: julia:1.4
  <<: *build_definition
  
test:1.4:
  stage: test
  image: julia:1.4
  <<: *test_definition

benchmark:1.4:
  stage: benchmark
  image: julia:1.4
  <<: *bench_definition
  
coverage:1.4:
  stage: coverage
  image: julia:1.4
  <<: *cov_definition

build:1.3_af:
  stage: build
  image: julia:1.3
  allow_failure: true
  <<: *install_af
  <<: *build_definition_af
  
test:1.3_af:
  stage: test
  image: julia:1.3
  allow_failure: true
  <<: *install_af
  <<: *test_definition_af
  
benchmark:1.3_af:
  stage: benchmark
  image: julia:1.3
  allow_failure: true
  <<: *install_af
  <<: *bench_definition_af

pages:
  stage: deploy
  image: julia:1.4
  script:
    - julia --project=docs -e 'using Pkg; Pkg.instantiate(); Pkg.develop(PackageSpec(path=pwd()))'
    - julia --project=docs --color=yes docs/make.jl
    - mv docs/build public
  artifacts:
    paths:
      - public
  only:
  - master

# REMARK: Do not forget to enable the coverage feature for your project, if you
# are using code coverage reporting above. This can be done by
#
# - Navigating to the `CI/CD Pipelines` settings of your project,
# - Copying and pasting the default `Simplecov` regex example provided, i.e.,
#   `\(\d+.\d+\%\) covered` in the `test coverage parsing` textfield.
#
# WARNING: This template is using the `julialang/julia` images from [Docker
# Hub][3]. One can use custom Julia images and/or the official ones found
# in the same place. However, care must be taken to correctly locate the binary
# file (`/opt/julia/bin/julia` above), which is usually given on the image's
# description page.
#
# [3]: http://hub.docker.com/
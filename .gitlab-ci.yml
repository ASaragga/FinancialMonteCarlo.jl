# An example .gitlab-ci.yml file to test (and optionally report the coverage
# results of) your [Julia][1] packages. Please refer to the [documentation][2]
# for more information about package development in Julia.
#
# Here, it is assumed that your Julia package is named `FinancialMonteCarlo`. Change it to
# whatever name you have given to your package.
#
# [1]: http://julialang.org/
# [2]: http://julia.readthedocs.org/
#variables:
#  JULIA_DEPOT_PATH: "$CI_PROJECT_DIR/.julia/"
stages:
  - build
  - test
  - coverage
  - deploy
before_script:
    # Install build dependencies
    - apt-get update && apt-get -y install cmake
    - apt-get update && apt-get -y install gcc
    - apt-get update && apt-get -y install g++
    - apt-get update && apt-get -y install bzip2

# Below is the template to run your tests in Julia
.test_template: &test_definition
  # Uncomment below if you would like to run the tests on specific references
  # only, such as the branches `master`, `development`, etc.
  # only:
  #   - master
  #   - development
  script:
    # Let's run the tests. Substitute `coverage = false` below, if you do not
    # want coverage results.
    - /usr/local/julia/bin/julia -e 'using InteractiveUtils; versioninfo(); using Pkg; Pkg.clone(pwd()); using FinancialMonteCarlo'
    - /usr/local/julia/bin/julia -e 'using Pkg; Pkg.test("FinancialMonteCarlo",coverage = true)'
  artifacts:
    when: on_success
    paths:
      - .julia/
      - src/*.cov
      - src/*/*.cov
      - src/*/*/*.cov
    expire_in: '1 hour'

.test_template: &build_definition
  # Uncomment below if you would like to run the tests on specific references
  # only, such as the branches `master`, `development`, etc.
  # only:
  #   - master
  #   - development
  script:
    # Let's run the tests. Substitute `coverage = false` below, if you do not
    # want coverage results.
    - /usr/local/julia/bin/julia -e 'using InteractiveUtils; versioninfo(); using Pkg; Pkg.clone(pwd()); using FinancialMonteCarlo'
  artifacts:
    when: on_success
    paths:
      - .julia/
    expire_in: '1 hour'
    
.test_template: &build_definition_af
  # Uncomment below if you would like to run the tests on specific references
  # only, such as the branches `master`, `development`, etc.
  # only:
  #   - master
  #   - development
  before_script:
    # Install additional build dependencies
    - sudo apt-add-repository -y ppa:keithw/glfw3
    - sudo apt-get update
    - sudo apt-get install libfreeimage-dev libatlas3gf-base libfftw3-dev cmake libglfw3-dev mesa-utils
    - wget -q http://arrayfire.s3.amazonaws.com/3.5.1/ArrayFire-v3.5.1_Linux_x86_64.sh
    - ls -l
    - sudo chmod +x ArrayFire-v3.5.1_Linux_x86_64.sh
    - sudo ./ArrayFire-v3.5.1_Linux_x86_64.sh --exclude-subdir --prefix=/usr/local
  script:
    # Let's run the tests. Substitute `coverage = false` below, if you do not
    # want coverage results.
    #- /usr/local/julia/bin/julia -e 'using InteractiveUtils; versioninfo(); using Pkg; Pkg.clone(pwd()); using FinancialMonteCarlo; using CuArrays'
    - mkdir $JULIA_DEPOT_PATH
    - /usr/local/julia/bin/julia -e 'using InteractiveUtils; versioninfo(); using Pkg; Pkg.clone(pwd()); Pkg.add(PackageSpec(name="ArrayFire", rev="master")); using FinancialMonteCarlo,ArrayFire'
    
.test_template: &cov_definition
  # Uncomment below if you would like to run the tests on specific references
  # only, such as the branches `master`, `development`, etc.
  # only:
  #   - master
  #   - development
  script:
    - /usr/local/julia/bin/julia -e 'using Pkg; Pkg.add("Coverage"); cd(Pkg.dir("FinancialMonteCarlo"));
      using Coverage; cl, tl = get_summary(process_folder());
      println("(", cl/tl*100, "%) covered")'

# Name a test and select an appropriate image.
test:1.1:
  stage: test
  image: julia:1.1
  <<: *test_definition
  
coverage:1.1:
  stage: coverage
  image: julia:1.1
  <<: *cov_definition
# Windows
#test:0.6.3-Windows:
#  image: julia:windowsservercore-1709
#  <<: *test_definition

## Maybe you would like to test your package against the development branch:
build:1.1:
  stage: build
  image: julia:1.1
  <<: *build_definition
    
        
build:1.1_af:
  stage: build
  image: julia:1.1
  allow_failure: true
  <<: *build_definition_af

pages:
  stage: deploy
  image: julia:1.1
  script:
    - julia --project=docs -e 'using Pkg; Pkg.instantiate(); Pkg.develop(PackageSpec(path=pwd()))'
    - julia --project=docs --color=yes docs/make.jl
    - mv docs/build public # move to the directory picked up by Gitlab pages
  artifacts:
    paths:
      - public
  only:
  - master
  
#test:dev-Windows:
#  image: julia:0.6.3-windowsservercore-1709
#  # ... allowing for failures, since we are testing against the development
#  # branch:
#  allow_failure: true
#  <<: *test_definition

# REMARK: Do not forget to enable the coverage feature for your project, if you
# are using code coverage reporting above. This can be done by
#
# - Navigating to the `CI/CD Pipelines` settings of your project,
# - Copying and pasting the default `Simplecov` regex example provided, i.e.,
#   `\(\d+.\d+\%\) covered` in the `test coverage parsing` textfield.
#
# WARNING: This template is using the `julialang/julia` images from [Docker
# Hub][3]. One can use custom Julia images and/or the official ones found
# in the same place. However, care must be taken to correctly locate the binary
# file (`/opt/julia/bin/julia` above), which is usually given on the image's
# description page.
#
# [3]: http://hub.docker.com/